//import java.util.ArrayList;
//import java.util.List;
//
//public class ArrayDeque<T> implements Deque<T>{
//
//    private T[] items = (T[]) new Object[8];
//    private int size;
//    private int front;
//    private int back;
//    private int st;
//    private final int MINIMUM_CAPACITY = 8;
//    public ArrayDeque() {
//        size = 0;
//        front = 4;
//        back = 4;
//        st  = 4;
//    }
//    public static void main(String[] args) {
//        Deque<Integer> ad = new ArrayDeque<>();
//    }
//
//    /** Resize the array to the new capacity. */
//    private void resize(int capacity) {
//        T[] newArray = (T[])new Object[capacity];
//        int i = 0;
//        while(front != back) {
//            newArray[i++] = items[front];
//            front = nextFront(front);
//        }
//        front = 0;
//        back = i;
//        items = newArray;
//
//
//    }
//    /** Helper method to get the next front int the deque. */
//    private int nextFront(int front) {
//        return (front-1+(items.length)) % items.length;
//    }
//    /** Helper method to get the next back int the deque */
//    private int nextBack(int back) {
//        return (back+1) % items.length;
//    }
//
//    /** Helper method to get the previous front in the deque. */
//    private int prevFront() {
//        return (front+1) % items.length;
//    }
//    /** Helper method to get the previous back in the deque. */
//    private int prevBack() {
//        return (back - 1 + items.length) % items.length;
//    }
//
//    @Override
//    public void addFirst(T x) {
//        if(size == items.length) {
//            resize(2* items.length);
//        }
//        items[nextFront(front)] = x;
//        front = nextFront(front);
//        size++;
//    }
//
//    @Override
//    public void addLast(T x) {
//        if(size == items.length) {
//            resize(2* items.length);
//        }
//        items[back] = x;
//        back = nextBack(back);
//        size++;
//    }
//
//    @Override
//    public List<T> toList() {
//        List<T> returnList = new ArrayList<>();
//        int currFront = front;
//        while(currFront != back) {
//            returnList.add(items[currFront]);
//            currFront = nextBack(currFront);
//        }
//        return returnList;
//    }
//
//    @Override
//    public boolean isEmpty() {
//        return (size == 0);
//    }
//
//    @Override
//    public int size() {
//        return size;
//    }
//
//    @Override
//    public T removeFirst() {
//        T temp = items[front];
//        items[front] = null;
//        front = prevFront();
//        size--;
//        if(size < items.length/4 && items.length >= MINIMUM_CAPACITY*2) {
//            resize(items.length/2);
//        }
//        return temp;
//    }
//
//    @Override
//    public T removeLast() {
//        T temp = items[back];
//        items[back] = null;
//        back = prevBack();
//        size--;
//        if(size < items.length/4 && items.length >= MINIMUM_CAPACITY*2) {
//            resize(items.length/2);
//        }
//        return temp;
//    }
//
//    @Override
//    public T get(int index) {
//        return items[(front+index)% items.length];
//    }
//}
